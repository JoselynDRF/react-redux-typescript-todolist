{"version":3,"sources":["types.ts","store/reducers/items.tsx","store/reducers/rootReducer.tsx","store/reducers/filter.tsx","services/api.ts","store/actions/items.tsx","store/sagas/sagas.ts","store/sagas/rootSaga.ts","store/store.tsx","components/Header.tsx","store/actions/filter.tsx","containers/FilterLink.tsx","components/TodoFilters.tsx","components/TodoForm.tsx","components/TodoItem.tsx","components/EmptyMessage.tsx","components/TodoMessage.tsx","containers/TodoList.tsx","index.tsx","App.tsx"],"names":["ItemsTypes","VisibilityFilters","initialState","data","combineReducers","items","state","action","type","ADD_ITEM","id","Math","random","text","payload","editing","complete","TOGGLE_ITEM","map","item","TOGGLE_EDIT_ITEM","UPDATE_ITEM","REMOVE_ITEM","filter","LOAD_REQUEST","LOAD_SUCCESS","LOAD_FAILURE","filterState","SHOW_ALL","UPDATE_FILTER","axios","create","addItem","toggleItem","toggleEditItem","updateItem","removeItem","loadRequest","loadSuccess","loadFailure","load","deleteRequest","call","api","get","put","delete","console","log","rootSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","title","className","updateFilter","connect","filterSelected","dispatch","bindActionCreators","filterActions","children","role","onClick","taskCounter","counter","SHOW_ACTIVE","SHOW_COMPLETED","emptyList","inputText","useRef","useEffect","current","focus","focusInputText","onSubmit","e","preventDefault","value","ref","placeholder","defaultValue","itemID","itemText","trim","acceptEdit","message","getTaskCounter","EmptyMessage","TodoFilters","filterItems","itemsActions","length","Header","TodoForm","TodoMessage","TodoItem","key","ReactDOM","render","document","getElementById"],"mappings":"soBAGYA,EAcAC,E,kFAdAD,K,oBAAAA,E,0BAAAA,E,oCAAAA,E,0BAAAA,E,0BAAAA,E,4BAAAA,E,4BAAAA,E,6BAAAA,M,cAcAC,K,oBAAAA,E,0BAAAA,E,gCAAAA,E,+BAAAA,M,KCfZ,IAAMC,EAA2B,CAC/BC,KAAM,ICCOC,cAAgB,CAC7BC,MDCa,WAAoE,IAAnEC,EAAkE,uDAA1DJ,EAAcK,EAA4C,uCAChF,OAAQA,EAAOC,MACb,KAAKR,EAAWS,SACd,MAAO,CACLN,KAAK,GAAD,mBACCG,EAAMH,MADP,CAEF,CACEO,GAAIC,KAAKC,SACTC,KAAMN,EAAOO,QAAQD,KACrBE,SAAS,EACTC,UAAU,MAKlB,KAAKhB,EAAWiB,YACd,MAAO,CACLd,KAAMG,EAAMH,KAAKe,KAAI,SAACC,GAAD,OAAYA,EAAKT,KAAOH,EAAOO,QAAQJ,GAA5B,eACvBS,EADuB,CACjBH,UAAWG,EAAKH,WAC3BG,MAGR,KAAKnB,EAAWoB,iBACd,MAAO,CACLjB,KAAMG,EAAMH,KAAKe,KAAI,SAACC,GAAD,OAAYA,EAAKT,KAAOH,EAAOO,QAAQJ,GAA5B,eACvBS,EADuB,CACjBJ,SAAUI,EAAKJ,UAC1BI,MAGR,KAAKnB,EAAWqB,YACd,MAAO,CACLlB,KAAMG,EAAMH,KAAKe,KAAI,SAACC,GAAD,OAAYA,EAAKT,KAAOH,EAAOO,QAAQJ,GAA5B,eACvBS,EADuB,CACjBN,KAAMN,EAAOO,QAAQD,OAChCM,MAGR,KAAKnB,EAAWsB,YACd,MAAO,CACLnB,KAAMG,EAAMH,KAAKoB,QAAO,SAACJ,GAAD,OAAUA,EAAKT,KAAOH,EAAOO,QAAQJ,OAGjE,KAAKV,EAAWwB,aACd,OAAO,eAAKlB,GAEd,KAAKN,EAAWyB,aACd,MAAO,CACLtB,KAAMI,EAAOJ,MAGjB,KAAKH,EAAW0B,aACd,MAAO,CACLvB,KAAM,IAGV,QACE,OAAOG,ICvDXqB,YCJa,WAA+E,IAA9ErB,EAA6E,uDAArEL,EAAkB2B,SAAmD,yCAAvCpB,EAAuC,EAAvCA,KAAMM,EAAiC,EAAjCA,QAC1D,OAAQN,GACN,KAAKP,EAAkB4B,cACrB,OAAOf,EAAQS,OACjB,QACE,OAAOjB,M,+BCLEwB,E,OAAAA,EAAMC,SCARC,EAAU,SAACnB,GAAD,MAAmB,CACxCL,KAAMR,EAAWS,SACjBK,QAAS,CACPD,UAISoB,EAAa,SAACvB,GAAD,MAAiB,CACzCF,KAAMR,EAAWiB,YACjBH,QAAS,CACPJ,QAISwB,EAAiB,SAACxB,GAAD,MAAiB,CAC7CF,KAAMR,EAAWoB,iBACjBN,QAAS,CACPJ,QAISyB,EAAa,SAACzB,EAAYG,GAAb,MAA+B,CACvDL,KAAMR,EAAWqB,YACjBP,QAAS,CACPJ,KACAG,UAISuB,EAAa,SAAC1B,GAAD,MAAiB,CACzCF,KAAMR,EAAWsB,YACjBR,QAAS,CACPJ,QAIS2B,EAAc,iBAAO,CAChC7B,KAAMR,EAAWwB,eAGNc,EAAc,SAACnC,GAAD,MAAmB,CAC5CK,KAAMR,EAAWyB,aACjBtB,SAGWoC,EAAc,iBAAO,CAChC/B,KAAMR,EAAW0B,e,WC3CFc,G,WASAC,GATV,SAAUD,IAAV,yEAEc,OAFd,kBAEoBE,YAAKC,EAAIC,IAAK,+BAFlC,OAGH,OAHG,SAEKzC,EAFL,EAEKA,KAFL,SAGG0C,YAAIP,EAAYnC,IAHnB,8BAKH,OALG,mCAKG0C,YAAIN,KALP,qDASA,SAAUE,EAAV,0EAEH,OAF6B3B,EAA1B,EAA0BA,QAA1B,kBAEG4B,YAAKC,EAAIG,OAAL,sCAA4ChC,EAAQJ,KAF3D,sDAIHqC,QAAQC,IAAI,gBAJT,oD,eCVkBC,GAAV,SAAUA,IAAV,iEACN,OADM,SACAC,YAAI,CACfC,YAAWnD,EAAWwB,aAAcgB,GACpCW,YAAWnD,EAAWsB,YAAamB,KAHxB,+ECCf,IAAMW,EAAiBC,cACjBC,EAAQC,YAAYC,EAAUC,YAAgBL,IAEpDA,EAAeM,IAAIT,GAEJK,QCJA,kBAAGK,EAAH,EAAGA,MAAH,OACb,yBAAKC,UAAU,UACZD,ICNQE,EAAe,SAACtC,GAAD,MAAqB,CAC/Cf,KAAMP,EAAkB4B,cACxBf,QAAS,CACPS,YCqCWuC,eANS,SAAC,EAAD,SAA8D,CACpFC,eADsB,EAAGpC,cAAH,EAAsCJ,WAInC,SAACyC,GAAD,OAAwBC,YAAmBC,EAAeF,KAEtEF,EArBI,SAAC,GAAD,IACjBK,EADiB,EACjBA,SACAN,EAFiB,EAEjBA,aACAtC,EAHiB,EAGjBA,OACAwC,EAJiB,EAIjBA,eAJiB,OAMjB,0BACEK,KAAK,eACLC,QAAS,kBAAMR,EAAatC,IAC5BqC,UAAWG,EAAiB,SAAW,IAEtCI,MCrBU,sBAAGG,YAAeC,EAAlB,EAAkBA,QAAS1D,EAA3B,EAA2BA,KAA3B,OACb,yBAAK+C,UAAU,qBACb,6BACE,0BAAMA,UAAU,UACbW,GAEF,IACD,8BAAO1D,IAET,yBAAK+C,UAAU,WACb,kBAAC,EAAD,CAAYrC,OAAQtB,EAAkB2B,UAAtC,OACA,kBAAC,EAAD,CAAYL,OAAQtB,EAAkBuE,aAAtC,UACA,kBAAC,EAAD,CAAYjD,OAAQtB,EAAkBwE,gBAAtC,gBChBS,cAA4C,IAAzCC,EAAwC,EAAxCA,UAAW1C,EAA6B,EAA7BA,QACrB2C,EAAYC,iBAAyB,MAI3CC,qBAAU,WACJH,GAHiB,wBAAMC,QAAN,IAAMA,GAAN,UAAMA,EAAWG,eAAjB,OAAM,EAAoBC,QAGhCC,MAYjB,OACE,0BAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEER,GAAaA,EAAUG,SAAuC,KAA5BH,EAAUG,QAAQM,QACtDpD,EAAQ2C,EAAUG,QAAQM,OAC1BT,EAAUG,QAAQM,MAAQ,MAM1B,2BAAOC,IAAKV,EAAWW,YAAY,2BACnC,4BAAQ9E,KAAK,UACX,uBAAGoD,UAAU,mBClBN,cAQO,IAAD,IAPnBzC,KACET,EAMiB,EANjBA,GAAIG,EAMa,EANbA,KAAME,EAMO,EANPA,QAASC,EAMF,EANEA,SAErBiB,EAImB,EAJnBA,WACAC,EAGmB,EAHnBA,eACAC,EAEmB,EAFnBA,WACAC,EACmB,EADnBA,WAEMuC,EAAYC,iBAAyB,MAE3CC,qBAAU,+BAAMF,QAAN,IAAMA,GAAN,UAAMA,EAAWG,eAAjB,aAAM,EAAoBC,WAWpC,OACE,4BACGhE,EAEG,oCACE,2BACE6C,UAAU,YACVyB,IAAKV,EACLY,aAAc1E,IAEhB,6BACE,0BAAM+C,UAAU,OAAOQ,KAAK,eAAeC,QAAS,kBApB7C,SAACmB,GAAoB,IAAD,IAC/BC,GAAoB,OAATd,QAAS,IAATA,GAAA,UAAAA,EAAWG,eAAX,mBAAoBM,aAApB,eAA2BM,SAAU,GAErC,KAAbD,IACFtD,EAAWqD,EAAQC,GACnBvD,EAAesD,IAemDG,CAAWjF,KACnE,uBAAGkD,UAAU,iBAEf,0BAAMA,UAAU,OAAOQ,KAAK,eAAeC,QAAS,kBAAMnC,EAAexB,KACvE,uBAAGkD,UAAU,kBAMnB,oCACE,yBAAKA,UAAU,wBACb,yBACES,QAAS,kBAAMpC,EAAWvB,IAC1B0D,KAAK,eACLR,UAAW5C,EAAW,wBAA0B,kBAElD,8BAAOA,EAAW,2BAAIH,GAAYA,IAEpC,6BACE,0BAAM+C,UAAU,OAAOQ,KAAK,eAAeC,QAAS,kBAAMnC,EAAexB,KACvE,uBAAGkD,UAAU,uBAEf,0BAAMA,UAAU,OAAOQ,KAAK,eAAeC,QAAS,kBAAMjC,EAAW1B,KACnE,uBAAGkD,UAAU,0BC9Dd,kBAAGgC,EAAH,EAAGA,QAAH,OACb,yBAAKhC,UAAU,cACb,uBAAGA,UAAU,qCACb,8BAAOgC,KCII,kBAAGjE,EAAH,EAAGA,YAAakE,EAAhB,EAAgBA,eAAhB,OACblE,IAAgB1B,EAAkBwE,eAE9B,oCACE,kBAACqB,EAAD,CAAcF,QAAQ,sCACtB,kBAACG,EAAD,CAAazB,YAAauB,OAE1B,kBAACC,EAAD,CAAcF,QAAQ,2BCqExBI,EAAc,SAAC3F,EAAekB,GAClC,OAAQA,GACN,KAAKtB,EAAkBuE,YACrB,OAAOnE,EAAMkB,QAAO,SAACJ,GAAD,OAAWA,EAAKH,YACtC,KAAKf,EAAkBwE,eACrB,OAAOpE,EAAMkB,QAAO,SAACJ,GAAD,OAAUA,EAAKH,YACrC,QACE,OAAOX,IAWEyD,eAPS,SAACxD,GAAD,MAA8B,CACpDD,MAAO2F,EAAY1F,EAAMD,MAAMF,KAAMG,EAAMqB,aAC3CA,YAAarB,EAAMqB,gBAGM,SAACqC,GAAD,OAAwBC,YAAmBgC,EAAcjC,KAErEF,EAhFE,SAAC,GASJ,IARZzD,EAQW,EARXA,MACA2B,EAOW,EAPXA,QACAC,EAMW,EANXA,WACAC,EAKW,EALXA,eACAC,EAIW,EAJXA,WACAC,EAGW,EAHXA,WACAT,EAEW,EAFXA,YACAU,EACW,EADXA,YAEAwC,qBAAU,WACRxC,MACC,CAACA,IAEJ,IAAMwD,EAAiB,kBAAOlE,IAAgB1B,EAAkBwE,eAC5D,CACAF,QAASlE,EAAMkB,QAAO,SAACJ,GAAD,OAAUA,EAAKH,YAAUkF,OAC/CrF,KAAM,mBACJ,CACF0D,QAASlE,EAAMkB,QAAO,SAACJ,GAAD,OAAWA,EAAKH,YAAUkF,OAChDrF,KAAM,eAGV,OACE,yBAAK+C,UAAU,aACb,kBAACuC,EAAD,CAAQxC,MAAM,aAEd,yBAAKC,UAAU,WACb,kBAACwC,EAAD,CACE1B,WAAYrE,EAAM6F,OAClBlE,QAASA,IAGO,IAAjB3B,EAAM6F,OAEH,kBAACG,EAAD,CACE1E,YAAaA,EACbkE,eAAgBA,IAGlB,oCACE,wBAAIjC,UAAU,SACXvD,EAAMa,KAAI,SAACC,GAAD,OACT,kBAACmF,EAAD,CACEC,IAAKpF,EAAKT,GACVS,KAAMA,EACNc,WAAYA,EACZC,eAAgBA,EAChBC,WAAYA,EACZC,WAAYA,QAKlB,kBAAC2D,EAAD,CAAazB,YAAauB,Y,MC7ExCW,IAASC,OAAO,mBCED,kBACb,kBAAC,IAAD,CAAUnD,MAAOA,GACf,kBAAC,EAAD,SDJY,MAASoD,SAASC,eAAe,W","file":"static/js/main.7a362753.chunk.js","sourcesContent":["/**\n * Action types\n */\nexport enum ItemsTypes {\n  ADD_ITEM = 'ADD_ITEM',\n  TOGGLE_ITEM = 'TOGGLE_ITEM',\n  TOGGLE_EDIT_ITEM = 'TOGGLE_EDIT_ITEM',\n  UPDATE_ITEM = 'UPDATE_ITEM',\n  REMOVE_ITEM = 'REMOVE_ITEM',\n  LOAD_REQUEST = 'LOAD_REQUEST',\n  LOAD_SUCCESS = 'LOAD_SUCCESS',\n  LOAD_FAILURE = 'LOAD_FAILURE'\n}\n\n/**\n * Filter options\n */\nexport enum VisibilityFilters {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  UPDATE_FILTER = 'UPDATE_FILTER'\n}\n\nexport interface TodoListActionTypes {\n  type: string,\n  payload: Item,\n  data: Item[]\n}\n\nexport interface FilterActionTypes {\n  type: string,\n  payload: {\n    filter: string\n  }\n}\n\n/**\n * Data types\n */\nexport interface Item {\n  id: number,\n  text: string,\n  editing: boolean,\n  complete: boolean\n}\n\n/**\n * State types\n */\nexport interface ApplicationState {\n  items: ItemsState,\n  filterState: string\n}\n\nexport interface ItemsState {\n  readonly data: Item[]\n}\n","import { ItemsState, ItemsTypes, TodoListActionTypes } from '../../types';\n\nconst initialState: ItemsState = {\n  data: [],\n};\n\nexport default (state = initialState, action: TodoListActionTypes): ItemsState => {\n  switch (action.type) {\n    case ItemsTypes.ADD_ITEM:\n      return {\n        data: [\n          ...state.data,\n          {\n            id: Math.random(),\n            text: action.payload.text,\n            editing: false,\n            complete: false,\n          },\n        ],\n      };\n\n    case ItemsTypes.TOGGLE_ITEM:\n      return {\n        data: state.data.map((item) => ((item.id === action.payload.id)\n          ? { ...item, complete: !item.complete }\n          : item)),\n      };\n\n    case ItemsTypes.TOGGLE_EDIT_ITEM:\n      return {\n        data: state.data.map((item) => ((item.id === action.payload.id)\n          ? { ...item, editing: !item.editing }\n          : item)),\n      };\n\n    case ItemsTypes.UPDATE_ITEM:\n      return {\n        data: state.data.map((item) => ((item.id === action.payload.id)\n          ? { ...item, text: action.payload.text }\n          : item)),\n      };\n\n    case ItemsTypes.REMOVE_ITEM:\n      return {\n        data: state.data.filter((item) => item.id !== action.payload.id),\n      };\n\n    case ItemsTypes.LOAD_REQUEST:\n      return { ...state };\n\n    case ItemsTypes.LOAD_SUCCESS:\n      return {\n        data: action.data,\n      };\n\n    case ItemsTypes.LOAD_FAILURE:\n      return {\n        data: [],\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport items from './items';\nimport filterState from './filter';\n\nexport default combineReducers({\n  items,\n  filterState,\n});\n","import { VisibilityFilters, FilterActionTypes } from '../../types';\n\nexport default (state = VisibilityFilters.SHOW_ALL, { type, payload }: FilterActionTypes) => {\n  switch (type) {\n    case VisibilityFilters.UPDATE_FILTER:\n      return payload.filter;\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nexport default axios.create();\n","import { Item, ItemsTypes } from '../../types';\n\nexport const addItem = (text: string) => ({\n  type: ItemsTypes.ADD_ITEM,\n  payload: {\n    text,\n  },\n});\n\nexport const toggleItem = (id: number) => ({\n  type: ItemsTypes.TOGGLE_ITEM,\n  payload: {\n    id,\n  },\n});\n\nexport const toggleEditItem = (id: number) => ({\n  type: ItemsTypes.TOGGLE_EDIT_ITEM,\n  payload: {\n    id,\n  },\n});\n\nexport const updateItem = (id: number, text: string) => ({\n  type: ItemsTypes.UPDATE_ITEM,\n  payload: {\n    id,\n    text,\n  },\n});\n\nexport const removeItem = (id: number) => ({\n  type: ItemsTypes.REMOVE_ITEM,\n  payload: {\n    id,\n  },\n});\n\nexport const loadRequest = () => ({\n  type: ItemsTypes.LOAD_REQUEST,\n});\n\nexport const loadSuccess = (data: Item[]) => ({\n  type: ItemsTypes.LOAD_SUCCESS,\n  data,\n});\n\nexport const loadFailure = () => ({\n  type: ItemsTypes.LOAD_FAILURE,\n});\n","import { call, put } from 'redux-saga/effects';\nimport api from '../../services/api';\nimport { TodoListActionTypes } from '../../types';\nimport { loadFailure, loadSuccess } from '../actions/items';\n\nexport function* load() {\n  try {\n    const { data } = yield call(api.get, 'http://localhost:3000/items');\n    yield put(loadSuccess(data));\n  } catch (error) {\n    yield put(loadFailure());\n  }\n}\n\nexport function* deleteRequest({ payload }: TodoListActionTypes) {\n  try {\n    yield call(api.delete, `http://localhost:3000/items/${payload.id}`);\n  } catch (error) {\n    console.log('DELETE ERROR');\n  }\n}\n","import { all, takeLatest } from 'redux-saga/effects';\nimport { ItemsTypes } from '../../types';\nimport { deleteRequest, load } from './sagas';\n\nexport default function* rootSaga() {\n  return yield all([\n    takeLatest(ItemsTypes.LOAD_REQUEST, load),\n    takeLatest(ItemsTypes.REMOVE_ITEM, deleteRequest),\n  ]);\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers/rootReducer';\nimport rootSaga from './sagas/rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\n\ninterface HeaderProps {\n  title: string,\n}\n\nexport default ({ title }: HeaderProps) => (\n  <div className=\"header\">\n    {title}\n  </div>\n);\n","import { VisibilityFilters } from '../../types';\n\nexport const updateFilter = (filter: string) => ({\n  type: VisibilityFilters.UPDATE_FILTER,\n  payload: {\n    filter,\n  },\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport * as filterActions from '../store/actions/filter';\nimport { ApplicationState } from '../types';\n\ninterface StateProps {\n  filterSelected: boolean\n}\n\ninterface DispatchProps {\n  updateFilter(filter: string): void\n}\n\ninterface OwnProps {\n  children: string,\n  filter: string\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nconst FilterLink = ({\n  children,\n  updateFilter,\n  filter,\n  filterSelected,\n}: Props) => (\n  <span\n    role=\"presentation\"\n    onClick={() => updateFilter(filter)}\n    className={filterSelected ? 'active' : ''}\n  >\n    {children}\n  </span>\n);\n\nconst mapStateToProps = ({ filterState }: ApplicationState, { filter }: OwnProps) => ({\n  filterSelected: filterState === filter,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(filterActions, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(FilterLink);\n","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../types';\n\ninterface CounterProps {\n  taskCounter: {\n    counter: number,\n    text: string\n  }\n}\n\nexport default ({ taskCounter: { counter, text } }: CounterProps) => (\n  <div className=\"filters-container\">\n    <div>\n      <span className=\"active\">\n        {counter}\n      </span>\n      {' '}\n      <span>{text}</span>\n    </div>\n    <div className=\"filters\">\n      <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n  </div>\n);\n","import React, { FormEvent, useRef, useEffect } from 'react';\n\ninterface TodoFormProps {\n  emptyList: boolean,\n  addItem(text: string): void,\n}\n\nexport default ({ emptyList, addItem }: TodoFormProps) => {\n  const inputText = useRef<HTMLInputElement>(null);\n\n  const focusInputText = () => inputText?.current?.focus();\n\n  useEffect(() => {\n    if (emptyList) focusInputText();\n  });\n\n  const submitHandler = (e: FormEvent) => {\n    e.preventDefault();\n\n    if (inputText && inputText.current && inputText.current.value !== '') {\n      addItem(inputText.current.value);\n      inputText.current.value = '';\n    }\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <input ref={inputText} placeholder=\"What needs to be done?\" />\n      <button type=\"submit\">\n        <i className=\"fas fa-plus\" />\n      </button>\n    </form>\n  );\n};\n","import React, { useRef, useEffect } from 'react';\nimport { Item } from '../types';\n\ninterface TodoItemProps {\n  item: Item,\n  toggleItem(id: number): void,\n  toggleEditItem(id: number): void,\n  updateItem(id: number, text: string): void,\n  removeItem(id: number): void\n}\n\nexport default ({\n  item: {\n    id, text, editing, complete,\n  },\n  toggleItem,\n  toggleEditItem,\n  updateItem,\n  removeItem,\n}: TodoItemProps) => {\n  const inputText = useRef<HTMLInputElement>(null);\n\n  useEffect(() => inputText?.current?.focus());\n\n  const acceptEdit = (itemID: number) => {\n    const itemText = inputText?.current?.value?.trim() || '';\n\n    if (itemText !== '') {\n      updateItem(itemID, itemText);\n      toggleEditItem(itemID);\n    }\n  };\n\n  return (\n    <li>\n      {editing\n        ? (\n          <>\n            <input\n              className=\"edit-item\"\n              ref={inputText}\n              defaultValue={text}\n            />\n            <div>\n              <span className=\"icon\" role=\"presentation\" onClick={() => acceptEdit(id)}>\n                <i className=\"fas fa-save\" />\n              </span>\n              <span className=\"icon\" role=\"presentation\" onClick={() => toggleEditItem(id)}>\n                <i className=\"fas fa-ban\" />\n              </span>\n            </div>\n          </>\n        )\n        : (\n          <>\n            <div className=\"check-item-container\">\n              <div\n                onClick={() => toggleItem(id)}\n                role=\"presentation\"\n                className={complete ? 'checkbox-item checked' : 'checkbox-item'}\n              />\n              <span>{complete ? <s>{text}</s> : text}</span>\n            </div>\n            <div>\n              <span className=\"icon\" role=\"presentation\" onClick={() => toggleEditItem(id)}>\n                <i className=\"fas fa-pencil-alt\" />\n              </span>\n              <span className=\"icon\" role=\"presentation\" onClick={() => removeItem(id)}>\n                <i className=\"fas fa-trash-alt\" />\n              </span>\n            </div>\n          </>\n        )}\n    </li>\n  );\n};\n","import React from 'react';\n\ninterface EmptyMessageProps {\n  message: string\n}\n\nexport default ({ message }: EmptyMessageProps) => (\n  <div className=\"empty-list\">\n    <i className=\"fas fa-clipboard-list empty-icon\" />\n    <span>{message}</span>\n  </div>\n);\n","import React from 'react';\nimport { VisibilityFilters } from '../types';\nimport EmptyMessage from './EmptyMessage';\nimport TodoFilters from './TodoFilters';\n\ninterface MessageProps {\n  filterState: string,\n  getTaskCounter(): {\n    counter: number,\n    text: string\n  }\n}\n\nexport default ({ filterState, getTaskCounter }: MessageProps) => (\n  filterState === VisibilityFilters.SHOW_COMPLETED\n    ? (\n      <>\n        <EmptyMessage message=\"There are no tasks completed yet!\" />\n        <TodoFilters taskCounter={getTaskCounter()} />\n      </>\n    ) : <EmptyMessage message=\"Add your first To Do!\" />\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport Header from '../components/Header';\nimport TodoFilters from '../components/TodoFilters';\nimport TodoForm from '../components/TodoForm';\nimport TodoItem from '../components/TodoItem';\nimport * as itemsActions from '../store/actions/items';\nimport { ApplicationState, Item, VisibilityFilters } from '../types';\nimport TodoMessage from '../components/TodoMessage';\n\ninterface StateProps {\n  items: Item[],\n  filterState: string\n}\n\ninterface DispatchProps {\n  addItem(text: string): void,\n  toggleItem(id: number): void,\n  toggleEditItem(id: number): void,\n  updateItem(id: number, text: string): void,\n  removeItem(id: number): void,\n  loadRequest(): void\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst TodoList = ({\n  items,\n  addItem,\n  toggleItem,\n  toggleEditItem,\n  updateItem,\n  removeItem,\n  filterState,\n  loadRequest,\n}: Props) => {\n  useEffect(() => {\n    loadRequest();\n  }, [loadRequest]);\n\n  const getTaskCounter = () => (filterState === VisibilityFilters.SHOW_COMPLETED\n    ? {\n      counter: items.filter((item) => item.complete).length,\n      text: 'completed tasks',\n    } : {\n      counter: items.filter((item) => !item.complete).length,\n      text: 'tasks left',\n    });\n\n  return (\n    <div className=\"todo-list\">\n      <Header title=\"TodoList\" />\n\n      <div className=\"content\">\n        <TodoForm\n          emptyList={!items.length}\n          addItem={addItem}\n        />\n\n        {items.length === 0\n          ? (\n            <TodoMessage\n              filterState={filterState}\n              getTaskCounter={getTaskCounter}\n            />\n          ) : (\n            <>\n              <ul className=\"items\">\n                {items.map((item) => (\n                  <TodoItem\n                    key={item.id}\n                    item={item}\n                    toggleItem={toggleItem}\n                    toggleEditItem={toggleEditItem}\n                    updateItem={updateItem}\n                    removeItem={removeItem}\n                  />\n                ))}\n              </ul>\n\n              <TodoFilters taskCounter={getTaskCounter()} />\n            </>\n          )}\n      </div>\n    </div>\n  );\n};\n\nconst filterItems = (items: Item[], filter: string) => {\n  switch (filter) {\n    case VisibilityFilters.SHOW_ACTIVE:\n      return items.filter((item) => !item.complete);\n    case VisibilityFilters.SHOW_COMPLETED:\n      return items.filter((item) => item.complete);\n    default:\n      return items;\n  }\n};\n\nconst mapStateToProps = (state: ApplicationState) => ({\n  items: filterItems(state.items.data, state.filterState),\n  filterState: state.filterState,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators(itemsActions, dispatch);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TodoList);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport TodoList from './containers/TodoList';\nimport './styles.scss';\n\nexport default () => (\n  <Provider store={store}>\n    <TodoList />\n  </Provider>\n);\n"],"sourceRoot":""}